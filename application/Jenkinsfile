pipeline {
  agent {
    kubernetes {
      label 'kaniko-kubectl'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: kubectl
      image: amazon/aws-cli:2.12.2
      command:
        - cat
      tty: true
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      command:
        - cat
      tty: true
"""
    }
  }

  environment {
    ACCOUNT_ID      = '646691617145'
    AWS_REGION      = 'us-east-1'
    ECR_REPO        = 'my-flask-app'
    EKS_CLUSTER     = 'eks-cluster'
    KUBE_NAMESPACE  = 'devops-tools'
    DEPLOYMENT_NAME = 'my-flask-deployment'
    CONTAINER_NAME  = 'flask-container'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Get ECR Auth & Build Image') {
      steps {
        script {
          container('kubectl') {
            withCredentials([
              usernamePassword(
                credentialsId: 'aws-access-key',
                usernameVariable: 'AWS_ACCESS_KEY_ID',
                passwordVariable: 'AWS_SECRET_ACCESS_KEY'
              )
            ]) {
              sh '''
                echo "[kubectl container] Configuring AWS CLI..."
                aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                aws configure set region $AWS_REGION

                echo "[kubectl container] Retrieving ECR auth token..."
                TOKEN=$(aws ecr get-login-password --region $AWS_REGION)
                echo "$TOKEN" > $WORKSPACE/ecr_token
              '''
            }
          }

          container('kaniko') {
            sh '''
              echo "[kaniko container] Creating Docker config for ECR..."
              mkdir -p /kaniko/.docker

              TOKEN=$(cat $WORKSPACE/ecr_token)
              AUTH_VAL=$(echo -n "AWS:${TOKEN}" | base64)

              cat <<EOF > /kaniko/.docker/config.json
{
  "auths": {
    "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com": {
      "auth": "${AUTH_VAL}"
    }
  }
}
EOF

              echo "[kaniko container] Building & pushing Docker image to ECR..."
              /kaniko/executor \
                --dockerfile $WORKSPACE/application/Dockerfile \
                --context    $WORKSPACE/application \
                --destination 646691617145.dkr.ecr.us-east-1.amazonaws.com/my-flask-app:$BUILD_NUMBER
            '''
          }
        }
      }
    }

    stage('Deploy to EKS') {
      steps {
        container('kubectl') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-access-key',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh '''
              echo "[kubectl container] Installing kubectl (since amazon/aws-cli doesn't include it by default)..."
              curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/kubectl

              kubectl version --client

              echo "[kubectl container] Configuring AWS CLI..."
              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
              aws configure set region $AWS_REGION

              echo "[kubectl container] Updating kubeconfig to access the EKS cluster..."
              aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

              echo "Updating the EKS deployment container image to ECR image..."
              kubectl set image deployment/$DEPLOYMENT_NAME \
                $CONTAINER_NAME=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:$BUILD_NUMBER \
                --namespace $KUBE_NAMESPACE

              echo "Waiting for the rollout to finish..."
              kubectl rollout status deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
            '''
          }
        }
      }
    }
  }
}
