pipeline {
  agent {
    kubernetes {
      label 'kaniko-kubectl'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      command:
        - cat
      tty: true
    - name: kubectl
      image: amazon/aws-cli:2.12.2
      command:
        - cat
      tty: true
      volumeMounts:
        - name: kubectl-install
          mountPath: /tmp
  volumes:
    - name: kubectl-install
      emptyDir: {}
"""
    }
  }

  environment {
    DOCKER_REGISTRY = 'docker.io'
    DOCKER_REPO     = 'b4w4rzr1ng/jenkins'
    IMAGE_TAG       = 'latest'

    AWS_REGION      = 'us-east-1'
    EKS_CLUSTER     = 'eks-cluster'
    KUBE_NAMESPACE  = 'devops-tools'
    DEPLOYMENT_NAME = 'my-flask-deployment'
    CONTAINER_NAME  = 'flask-container'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build & Push') {
      steps {
        container('kaniko') {
          withCredentials([
            usernamePassword(
              credentialsId: 'docker hub', 
              usernameVariable: 'DOCKER_USER',
              passwordVariable: 'DOCKER_PASS'
            )
          ]) {
            sh '''
              echo "Creating Docker config for Kaniko..."
              mkdir -p /kaniko/.docker
              cat <<EOF > /kaniko/.docker/config.json
{
  "auths": {
    "https://index.docker.io/v1/": {
      "auth": "$(echo -n $DOCKER_USER:$DOCKER_PASS | base64)"
    }
  }
}
EOF

              echo "Building & pushing Docker image with Kaniko..."
              /kaniko/executor \
                --dockerfile $WORKSPACE/application/Dockerfile \
                --context    $WORKSPACE/application \
                --destination $DOCKER_REGISTRY/$DOCKER_REPO:${BUILD_NUMBER} 
            '''
          }
        }
      }
    }

    stage('Deploy to EKS') {
      steps {
        container('kubectl') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-access-key',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh '''
              echo "Installing kubectl..."
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/kubectl

              kubectl version --client

              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
              aws configure set region $AWS_REGION

              aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

              echo "Updating the EKS deployment container image..."
              kubectl set image deployment/$DEPLOYMENT_NAME \
                $CONTAINER_NAME=$DOCKER_REGISTRY/$DOCKER_REPO:${BUILD_NUMBER} \
                --namespace $KUBE_NAMESPACE

              kubectl rollout status deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
            '''
          }
        }
      }
    }
  }
}
