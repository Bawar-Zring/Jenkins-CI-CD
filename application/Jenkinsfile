pipeline {
  agent {
    kubernetes {
      label 'kaniko-kubectl'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      command:
        - cat
      tty: true
    - name: kubectl
      image: amazon/aws-cli:2.12.2
      command:
        - cat
      tty: true
      volumeMounts:
        - name: kubectl-install
          mountPath: /tmp
  volumes:
    - name: kubectl-install
      emptyDir: {}
"""
    }
  }

  /* ENV variables: replace these with your real AWS Account ID, ECR repo name, etc. */
  environment {
    ACCOUNT_ID      = '646691617145'       // Your AWS account
    AWS_REGION      = 'us-east-1'
    ECR_REPO        = 'my-flask-app'       // The ECR repository name
    IMAGE_TAG       = "${BUILD_NUMBER}"    // Or 'latest'
    EKS_CLUSTER     = 'eks-cluster'
    KUBE_NAMESPACE  = 'devops-tools'
    DEPLOYMENT_NAME = 'my-flask-deployment'
    CONTAINER_NAME  = 'flask-container'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build & Push to ECR') {
      steps {
        container('kaniko') {
          /* Use your AWS credentials here to get an ECR auth token.
             We'll build a Docker config with "auth" that Kaniko can use. */
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-access-key',  // ID from Jenkins Credentials
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh '''
              echo "Configuring AWS credentials..."
              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
              aws configure set region $AWS_REGION

              echo "Creating Docker config for Kaniko to push to ECR..."
              mkdir -p /kaniko/.docker

              # We combine 'AWS' as the username + the ECR token as the password, then base64-encode "AWS:<token>"
              ECR_PASS=$(aws ecr get-login-password --region $AWS_REGION)
              AUTH_VAL=$(echo -n "AWS:${ECR_PASS}" | base64)

              cat <<EOF > /kaniko/.docker/config.json
{
  "auths": {
    "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com": {
      "auth": "${AUTH_VAL}"
    }
  }
}
EOF

              echo "Building & pushing Docker image with Kaniko..."
              /kaniko/executor \
                --dockerfile $WORKSPACE/application/Dockerfile \
                --context    $WORKSPACE/application \
                --destination ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG
            '''
          }
        }
      }
    }

    stage('Deploy to EKS') {
      steps {
        container('kubectl') {
          /* Reuse the same AWS creds for EKS operations. */
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-access-key',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh '''
              # Install kubectl (amazon/aws-cli container doesn't include it by default)
              echo "Installing kubectl..."
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/kubectl

              kubectl version --client

              echo "Configuring AWS CLI..."
              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
              aws configure set region $AWS_REGION

              echo "Updating kubeconfig for EKS cluster..."
              aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

              echo "Updating the EKS deployment container image..."
              kubectl set image deployment/$DEPLOYMENT_NAME \
                $CONTAINER_NAME=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG \
                --namespace $KUBE_NAMESPACE

              echo "Waiting for rollout to complete..."
              kubectl rollout status deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
            '''
          }
        }
      }
    }
  }
}
